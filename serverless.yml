# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: notizen-api # NOTE: update this with your service name

##############################################
# Plugins
# -- serverless-webpack to transpile ES6/ES7
#############################################
plugins:
  - serverless-webpack

##############################################
# Provider Defaults
# -- runtime nodejs 8.10
# -- stage dev  (this can be overriden in custom)
# -- region us-west-2
#############################################
provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: us-west-2

#####################################
# Provider wide environment variables
#####################################
  environment:
    NOTIZEN_TABLE: ${self:custom.dynamodbTableName}

# Custom variables for use within the deployment configuration
custom:
  webpackIncludeModules: true
  deployStage: ${opt:stage, self:provider.stage}
  uploadBucketName: '${self:service}-uploads-${self:custom.deployStage}'
  dynamodbTableName: '${self:service}-table-${self:custom.deployStage}'



# Add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["NotizenDynamoDBTable", "Arn"] }


# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /notes
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #         domain api call
  # - authorizer: authenticate using the AWS IAM role
  create:
    handler: create.main
    events:
      - http:
          path: notes
          method: post
          cors: true
          authorizer: aws_iam


#  hello:
#    handler: handler.hello

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

#############################################
# Add CloudFormation resource templates here
#############################################
resources:
  Resources:
    NotizenUploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: '${self:custom.uploadBucketName}'
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ['*']
              AllowedMethods: [GET,PUT,POST,HEAD]
              AllowedOrigins: ['*']
              MaxAge: '3600'
    NotizenDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: 'userId'
            AttributeType: 'S'
          -
            AttributeName: 'noteId'
            AttributeType: 'S'
        KeySchema:
          -
            AttributeName: 'userId'
            KeyType: 'HASH'
          -
            AttributeName: 'noteId'
            KeyType: 'RANGE'
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: '${self:custom.dynamodbTableName}'


#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
